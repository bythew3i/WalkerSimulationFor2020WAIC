// Generated by gencpp from file walker_msgs/leg_motion_Status.msg
// DO NOT EDIT!


#ifndef WALKER_MSGS_MESSAGE_LEG_MOTION_STATUS_H
#define WALKER_MSGS_MESSAGE_LEG_MOTION_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace walker_msgs
{
template <class ContainerAllocator>
struct leg_motion_Status_
{
  typedef leg_motion_Status_<ContainerAllocator> Type;

  leg_motion_Status_()
    : status()  {
    }
  leg_motion_Status_(const ContainerAllocator& _alloc)
    : status(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;




  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  INIT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STANDING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SCRIPTING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  NAV;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ARMCTRL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  VISIONCTRL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  KEYBOARDCTRL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  REMOTERCTRL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  BALANCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TAIJI_INIT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TAIJI;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  YOGA_INIT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  YOGA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  EMSTOP;

  typedef boost::shared_ptr< ::walker_msgs::leg_motion_Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::walker_msgs::leg_motion_Status_<ContainerAllocator> const> ConstPtr;

}; // struct leg_motion_Status_

typedef ::walker_msgs::leg_motion_Status_<std::allocator<void> > leg_motion_Status;

typedef boost::shared_ptr< ::walker_msgs::leg_motion_Status > leg_motion_StatusPtr;
typedef boost::shared_ptr< ::walker_msgs::leg_motion_Status const> leg_motion_StatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::INIT =
        
          "standInit"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::STANDING =
        
          "standing"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::SCRIPTING =
        
          "scripting"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::NAV =
        
          "navigating"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::ARMCTRL =
        
          "armCtrl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::VISIONCTRL =
        
          "visionCtrl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::KEYBOARDCTRL =
        
          "keyboardCtrl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::REMOTERCTRL =
        
          "remoterCtrl"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::BALANCE =
        
          "balance"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::TAIJI_INIT =
        
          "taijiInit"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::TAIJI =
        
          "taiji"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::YOGA_INIT =
        
          "yogaInit"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::YOGA =
        
          "yoga"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      leg_motion_Status_<ContainerAllocator>::EMSTOP =
        
          "emergencyStop"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::walker_msgs::leg_motion_Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::walker_msgs::leg_motion_Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace walker_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'stereo_msgs': ['/opt/ros/kinetic/share/stereo_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'walker_msgs': ['/home/cjl/core_ws/walker_ws/walker2_motion_output/src/walker_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'map_msgs': ['/opt/ros/kinetic/share/map_msgs/cmake/../msg'], 'diagnostic_msgs': ['/opt/ros/kinetic/share/diagnostic_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::walker_msgs::leg_motion_Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::walker_msgs::leg_motion_Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walker_msgs::leg_motion_Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::walker_msgs::leg_motion_Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_msgs::leg_motion_Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::walker_msgs::leg_motion_Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::walker_msgs::leg_motion_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d1a441ce08becf86e68bfea26a6dade";
  }

  static const char* value(const ::walker_msgs::leg_motion_Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d1a441ce08becf8ULL;
  static const uint64_t static_value2 = 0x6e68bfea26a6dadeULL;
};

template<class ContainerAllocator>
struct DataType< ::walker_msgs::leg_motion_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "walker_msgs/leg_motion_Status";
  }

  static const char* value(const ::walker_msgs::leg_motion_Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::walker_msgs::leg_motion_Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# legs status defines\n\
string INIT=standInit\n\
string STANDING=standing\n\
string SCRIPTING=scripting\n\
string NAV=navigating\n\
string ARMCTRL=armCtrl\n\
string VISIONCTRL=visionCtrl\n\
string KEYBOARDCTRL=keyboardCtrl\n\
string REMOTERCTRL=remoterCtrl\n\
string BALANCE=balance\n\
string TAIJI_INIT=taijiInit\n\
string TAIJI=taiji\n\
string YOGA_INIT=yogaInit\n\
string YOGA=yoga\n\
string EMSTOP=emergencyStop\n\
\n\
##############################################\n\
# current leg status\n\
string status\n\
";
  }

  static const char* value(const ::walker_msgs::leg_motion_Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::walker_msgs::leg_motion_Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct leg_motion_Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::walker_msgs::leg_motion_Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::walker_msgs::leg_motion_Status_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WALKER_MSGS_MESSAGE_LEG_MOTION_STATUS_H
